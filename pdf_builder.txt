import 'package:flutter/material.dart';
import 'package:appmania_final/cart_model.dart';

import 'package:flutter/services.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';

import 'main.dart';

class Invoice extends StatefulWidget {
  const Invoice({super.key});
  @override
  State<Invoice> createState() => _InvoiceState();
}

class _InvoiceState extends State<Invoice> {
  // final doc = pw.Document();
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter PDF Demo',
            style: TextStyle(color: Colors.orange, fontSize: 30)),
      ),
      body: PdfPreview(
        maxPageWidth: 500,
        build: (format) {
          return buildPdf();
        },
      ),
    );
  }

  Future<Uint8List> buildPdf() async {
    final doc = pw.Document();
    final iconImage = (await rootBundle.load('assets/images/ninja_cart.png'))
        .buffer
        .asUint8List();

    final TableHeader = ['name', 'quantity', 'price', 'total'];
    final TableData = [['Chess cake','2','\$ 20','\$ 40'],['Chees cake','2','\$ 20','\$ 40']];
    // final TableData = ['${cartdata[index].name.toString()}',
    //                    '${cartdata[index].qty.toString()}',
    //                    '${cartdata[index].price.toString()}',
    //                    '${cartdata[index].name.toString()}'];

    doc.addPage(pw.Page(
        pageFormat: PdfPageFormat.a4,
        build: (context) {
          return pw.Column(
              children: [
                pw.Row(
                    children: [
                      pw.Image(
                          pw.MemoryImage(iconImage), height: 70, width: 70),
                      pw.SizedBox(width: 1 * PdfPageFormat.mm),
                      pw.Column(
                        mainAxisSize: pw.MainAxisSize.min,
                        crossAxisAlignment: pw.CrossAxisAlignment.start,
                        children: [
                          pw.Text(
                            'INVOICE',
                            style: pw.TextStyle(
                              fontSize: 17.0,
                              fontWeight: pw.FontWeight.bold,
                            ),
                          ),
                          pw.Text(
                            'Food Ninja Appmania',
                            style: const pw.TextStyle(
                              fontSize: 15.0,
                              color: PdfColors.grey700,
                            ),
                          ),
                        ],
                      ),
                      pw.Spacer(),
                      pw.Column(
                        mainAxisSize: pw.MainAxisSize.min,
                        crossAxisAlignment: pw.CrossAxisAlignment.start,
                        children: [
                          pw.Text(
                            'Ved patel',
                            style: pw.TextStyle(
                              fontSize: 16,
                              fontWeight: pw.FontWeight.bold,
                            ),
                          ),
                          pw.Text(
                            'vedpatel@gmail.com',
                          ),
                          pw.Text(DateTime.now().toString(),
                          ),
                        ],
                      ),
                    ]),
                pw.SizedBox(height: 1 * PdfPageFormat.mm),
                pw.Divider(),
                pw.SizedBox(height: 1 * PdfPageFormat.mm),
                pw.Text(
                    'Dear Customer , this is your bill if any changes happen'
                        'in bill you will complain of this changes'
                        'there is always help of you from our side',
                    textAlign: pw.TextAlign.justify,
                    style: pw.TextStyle(fontSize: 14)),
                //pw.Text('${cartdata[index].name.toString()}'),
                pw.SizedBox(height: 5 * PdfPageFormat.mm),
                pw.Table.fromTextArray(
                  headers: TableHeader,
                  data: TableData,
                  border: pw.TableBorder(),
                  headerStyle: pw.TextStyle(fontWeight: pw.FontWeight.bold),
                  headerDecoration: pw.BoxDecoration(
                      color: PdfColors.grey50),
                  cellHeight: 40,
                  cellAlignments: {
                    0: pw.Alignment.centerLeft,
                    1: pw.Alignment.centerRight,
                    2: pw.Alignment.centerRight,
                    3: pw.Alignment.centerRight,
                  },
                ),

                pw.Divider(),
                pw.Container(
                  alignment: pw.Alignment.centerRight,
                  child: pw.Row(
                    children: [
                      pw.Spacer(flex: 6),
                      pw.Expanded(
                        flex: 4,
                        child: pw.Column(
                          crossAxisAlignment: pw.CrossAxisAlignment.start,
                          children: [
                            pw.Row(
                              children: [
                                pw.Expanded(
                                  child: pw.Text(
                                    'Net total',
                                    style: pw.TextStyle(
                                      fontWeight: pw.FontWeight.bold,
                                    ),
                                  ),
                                ),
                                pw.Text(
                                  '\$ 464',
                                  style: pw.TextStyle(
                                    fontWeight: pw.FontWeight.bold,
                                  ),
                                ),
                              ],
                            ),
                            pw.Row(
                              children: [
                                pw.Expanded(
                                  child: pw.Text(
                                    'Vat 19.5 %',
                                    style: pw.TextStyle(
                                      fontWeight: pw.FontWeight.bold,
                                    ),
                                  ),
                                ),
                                pw.Text(
                                  '\$ 90.48',
                                  style: pw.TextStyle(
                                    fontWeight: pw.FontWeight.bold,
                                  ),
                                ),
                              ],
                            ),
                            pw.Divider(),
                            pw.Row(
                              children: [
                                pw.Expanded(
                                  child: pw.Text(
                                    'Total amount due',
                                    style: pw.TextStyle(
                                      fontSize: 14.0,
                                      fontWeight: pw.FontWeight.bold,
                                    ),
                                  ),
                                ),
                                pw.Text(
                                  '\$ 554.48',
                                  style: pw.TextStyle(
                                    fontWeight: pw.FontWeight.bold,
                                  ),
                                ),
                              ],
                            ),
                            pw.SizedBox(height: 2 * PdfPageFormat.mm),
                            pw.Container(height: 1, color: PdfColors.grey400),
                            pw.SizedBox(height: 0.5 * PdfPageFormat.mm),
                            pw.Container(height: 1, color: PdfColors.grey400),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ]);
        }));

    await Printing.layoutPdf(
        onLayout: (PdfPageFormat format) async => doc.save());
    return doc.save();
  }
}


//             pw.Text(
//               'Dear John,\nLorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium optio, eaque rerum! Provident similique accusantium nemo autem. Veritatis obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid culpa officia aut! Impedit sit sunt quaerat, odit, tenetur error',
//               textAlign: pw.TextAlign.justify,
//             ),
//             pw.SizedBox(height: 5 * PdfPageFormat.mm),
//
//             ///
//             /// PDF Table Create
//             ///
//             pw.Table.fromTextArray(
//               headers: tableHeaders,
//               data: tableData,
//               border: null,
//               headerStyle: pw.TextStyle(fontWeight: pw.FontWeight.bold),
//               headerDecoration:
//               const pw.BoxDecoration(color: PdfColors.grey300),
//               cellHeight: 30.0,
//               cellAlignments: {
//                 0: pw.Alignment.centerLeft,
//                 1: pw.Alignment.centerRight,
//                 2: pw.Alignment.centerRight,
//                 3: pw.Alignment.centerRight,
//                 4: pw.Alignment.centerRight,
//               },
//             ),
//             pw.Divider(),
//             pw.Container(
//               alignment: pw.Alignment.centerRight,
//               child: pw.Row(
//                 children: [
//                   pw.Spacer(flex: 6),
//                   pw.Expanded(
//                     flex: 4,
//                     child: pw.Column(
//                       crossAxisAlignment: pw.CrossAxisAlignment.start,
//                       children: [
//                         pw.Row(
//                           children: [
//                             pw.Expanded(
//                               child: pw.Text(
//                                 'Net total',
//                                 style: pw.TextStyle(
//                                   fontWeight: pw.FontWeight.bold,
//                                 ),
//                               ),
//                             ),
//                             pw.Text(
//                               '\$ 464',
//                               style: pw.TextStyle(
//                                 fontWeight: pw.FontWeight.bold,
//                               ),
//                             ),
//                           ],
//                         ),
//                         pw.Row(
//                           children: [
//                             pw.Expanded(
//                               child: pw.Text(
//                                 'Vat 19.5 %',
//                                 style: pw.TextStyle(
//                                   fontWeight: pw.FontWeight.bold,
//                                 ),
//                               ),
//                             ),
//                             pw.Text(
//                               '\$ 90.48',
//                               style: pw.TextStyle(
//                                 fontWeight: pw.FontWeight.bold,
//                               ),
//                             ),
//                           ],
//                         ),
//                         pw.Divider(),
//                         pw.Row(
//                           children: [
//                             pw.Expanded(
//                               child: pw.Text(
//                                 'Total amount due',
//                                 style: pw.TextStyle(
//                                   fontSize: 14.0,
//                                   fontWeight: pw.FontWeight.bold,
//                                 ),
//                               ),
//                             ),
//                             pw.Text(
//                               '\$ 554.48',
//                               style: pw.TextStyle(
//                                 fontWeight: pw.FontWeight.bold,
//                               ),
//                             ),
//                           ],
//                         ),
//                         pw.SizedBox(height: 2 * PdfPageFormat.mm),
//                         pw.Container(height: 1, color: PdfColors.grey400),
//                         pw.SizedBox(height: 0.5 * PdfPageFormat.mm),
//                         pw.Container(height: 1, color: PdfColors.grey400),
//                       ],
//                     ),
//                   ),
//                 ],
//               ),
//             ),
//           ];
//         },
//         footer: (context) {
//           return pw.Column(
//             mainAxisSize: pw.MainAxisSize.min,
//             children: [
//               pw.Divider(),
//               pw.SizedBox(height: 2 * PdfPageFormat.mm),
//               pw.Text(
//                 'Flutter Approach',
//                 style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
//               ),
//               pw.SizedBox(height: 1 * PdfPageFormat.mm),
//               pw.Row(
//                 mainAxisAlignment: pw.MainAxisAlignment.center,
//                 children: [
//                   pw.Text(
//                     'Address: ',
//                     style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
//                   ),
//                   pw.Text(
//                     'Merul Badda, Anandanagor, Dhaka 1212',
//                   ),
//                 ],
//               ),
//               pw.SizedBox(height: 1 * PdfPageFormat.mm),
//               pw.Row(
//                 mainAxisAlignment: pw.MainAxisAlignment.center,
//                 children: [
//                   pw.Text(
//                     'Email: ',
//                     style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
//                   ),
//                   pw.Text(
//                     'flutterapproach@gmail.com',
//                   ),
//                 ],
//               ),
//             ],
//           );
//         },
//       ),
//     );
//
//     //return FileHandleApi.saveDocument(name: 'my_invoice.pdf', pdf: pdf);
//   }
// }
